pipeline {
  agent any 
  tools {
    maven 'Maven'
  }
  stages {
    stage ('Initialize') {
      steps {
        sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
            ''' 
      }
    }
  
    stage ('Check-Git-Secrets') {
      steps {
        sh 'sudo whoami'  
        sh 'sudo rm trufflehog || true'
        sh 'sudo docker run gesellix/trufflehog --json https://github.com/shazz0512/testproject.git > trufflehog'
        sh 'sudo cat trufflehog'
      }
    }
    stage ('Source Composition Analysis') {
      steps {
         sh 'sudo rm owasp* || true'
         sh 'sudo wget "https://raw.githubusercontent.com/shazz0512/testproject/master/owasp-dependency-check.sh" '
         sh 'sudo chmod +x owasp-dependency-check.sh'
         sh 'sudo bash owasp-dependency-check.sh'
         //sh 'sudo wget https://raw.githubusercontent.com/Achaursiya/Proj/main/pom.xml'
         archiveArtifacts artifacts: '**/odc-reports/*', allowEmptyArchive: true
        
      }
    }
    
     stage ('SAST') {
      steps {
        withSonarQubeEnv('sonar') {
          sh 'sudo mvn sonar:sonar -Dsonar.login=0181c8ea718785d677f0bef67d8dea08fbae2a26'
          sh 'sudo cat target/sonar/report-task.txt '
        }
      }
    }
     stage ('Build') {
      steps {
      sh 'sudo mvn clean package'
       }
    }
    stage ('Deploy-To-Tomcat') {
            steps {
                sh 'sudo cp target/*.war /opt/tomcat9/webapps/webapp.war'
              }             
    }
    stage ('DAST') {
      steps {
         sh 'sudo ssh root@172.31.10.91 "docker run -t owasp/zap2docker-stable zap-baseline.py -t http://65.2.75.99:8181/webapp/" || true '
      }
    }
}
post {
       always {
            script {
                def reports = findFiles(glob: '**/odc-reports/dependency-check-report.xml')
                def sourceFiles = reports.collect { it.path }
                
                recordIssues(
                    enabledForFailure: true,
                    tools: [dependencyCheck(pattern: '**/odc-reports/dependency-check-report.xml')],
                    aggregatingResults: true
                ) {
                    scanForIssues tool: dependencyCheck(pattern: '**/odc-reports/dependency-check-report.xml'),
                        sourceCodeEncoding: 'UTF-8', reportEncoding: 'UTF-8',
                        sourceFiles: sourceFiles
                }
            }
    }
}
}
